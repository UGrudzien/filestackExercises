/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as tslib_1 from "tslib";
import * as fs from 'fs';
import * as path from 'path';
import * as mime from 'mime';
import { calcMD5 } from './md5';
/**
 * Given a file with a valid descriptor this will return a part object
 * The part object represents a chunk of the file
 * @private
 * @param file    File object that contains a descriptor
 * @param part    Part object that contains a number field
 * @param config  Current upload configuration settings
 */
export var getPart = function (part, _a) {
    var config = _a.config, file = _a.file;
    return new Promise(function (resolve, reject) {
        var buffer = Buffer.alloc(config.partSize);
        fs.read(file.fd, buffer, 0, config.partSize, part.number * config.partSize, function (err, nread) {
            if (err)
                return reject(err);
            if (nread === 0) {
                fs.close(file.fd, function (err) {
                    if (err)
                        return reject(err);
                });
            }
            buffer = buffer.slice(0, nread);
            var partObj = tslib_1.__assign({}, part, { buffer: buffer, size: buffer.byteLength, md5: calcMD5(buffer) });
            return resolve(partObj);
        });
    });
};
/**
 * Given a file path, returns a file object
 * @private
 * @param filePath  A valid path to a file on your filesystem.
 */
export var getFile = function (filePath) {
    return new Promise(function (resolve, reject) {
        fs.open(filePath, 'r', function (err, fd) {
            if (err)
                return reject(err);
            var stats = fs.statSync(filePath);
            var file = {
                fd: fd,
                name: path.basename(filePath),
                size: stats.size,
                type: mime.getType(filePath),
            };
            return resolve(file);
        });
    });
};
/**
 * Close file descriptor
 * @private
 * @param fd  A valid file descriptor
 */
export var closeFile = function (fd) {
    return fs.closeSync(fd);
};
